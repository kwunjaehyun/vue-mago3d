define(["./when-54335d57","./Cartesian2-8646c5a1","./ArcType-2b58731c","./Transforms-79117a7b","./Color-98c5f877","./ComponentDatatype-1a100acd","./Check-24483042","./GeometryAttribute-374f805d","./GeometryAttributes-caa08d6c","./IndexDatatype-82ceea78","./Math-d6182036","./PolylinePipeline-3803a6c2","./RuntimeError-88a32665","./WebGLConstants-95ceb4e9","./EllipsoidGeodesic-cc216670","./EllipsoidRhumbLine-2b7999f3","./IntersectionTests-5394f658","./Plane-13ae4b1b"],function(S,I,R,O,M,U,e,N,F,H,W,Y,o,r,t,a,l,i){"use strict";function q(e,o,r,t,a,l,i){var n=Y.PolylinePipeline.numberOfPoints(e,o,a),s=r.red,p=r.green,c=r.blue,d=r.alpha,y=t.red,f=t.green,u=t.blue,h=t.alpha;if(M.Color.equals(r,t)){for(P=0;P<n;P++)l[i++]=M.Color.floatToByte(s),l[i++]=M.Color.floatToByte(p),l[i++]=M.Color.floatToByte(c),l[i++]=M.Color.floatToByte(d);return i}for(var C=(y-s)/n,T=(f-p)/n,g=(u-c)/n,m=(h-d)/n,v=i,P=0;P<n;P++)l[v++]=M.Color.floatToByte(s+P*C),l[v++]=M.Color.floatToByte(p+P*T),l[v++]=M.Color.floatToByte(c+P*g),l[v++]=M.Color.floatToByte(d+P*m);return v}function d(e){var o=(e=S.defaultValue(e,S.defaultValue.EMPTY_OBJECT)).positions,r=e.colors,t=S.defaultValue(e.colorsPerVertex,!1);this._positions=o,this._colors=r,this._colorsPerVertex=t,this._arcType=S.defaultValue(e.arcType,R.ArcType.GEODESIC),this._granularity=S.defaultValue(e.granularity,W.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=S.defaultValue(e.ellipsoid,I.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry";var a=1+o.length*I.Cartesian3.packedLength;a+=S.defined(r)?1+r.length*M.Color.packedLength:1,this.packedLength=a+I.Ellipsoid.packedLength+3}d.pack=function(e,o,r){var t;r=S.defaultValue(r,0);var a=e._positions,l=a.length;for(o[r++]=l,t=0;t<l;++t,r+=I.Cartesian3.packedLength)I.Cartesian3.pack(a[t],o,r);var i=e._colors,l=S.defined(i)?i.length:0;for(o[r++]=l,t=0;t<l;++t,r+=M.Color.packedLength)M.Color.pack(i[t],o,r);return I.Ellipsoid.pack(e._ellipsoid,o,r),r+=I.Ellipsoid.packedLength,o[r++]=e._colorsPerVertex?1:0,o[r++]=e._arcType,o[r]=e._granularity,o},d.unpack=function(e,o,r){o=S.defaultValue(o,0);for(var t=e[o++],a=new Array(t),l=0;l<t;++l,o+=I.Cartesian3.packedLength)a[l]=I.Cartesian3.unpack(e,o);var i=0<(t=e[o++])?new Array(t):void 0;for(l=0;l<t;++l,o+=M.Color.packedLength)i[l]=M.Color.unpack(e,o);var n=I.Ellipsoid.unpack(e,o);o+=I.Ellipsoid.packedLength;var s=1===e[o++],p=e[o++],c=e[o];return S.defined(r)?(r._positions=a,r._colors=i,r._ellipsoid=n,r._colorsPerVertex=s,r._arcType=p,r._granularity=c,r):new d({positions:a,colors:i,ellipsoid:n,colorsPerVertex:s,arcType:p,granularity:c})};var z=new Array(2),J=new Array(2),j={positions:z,height:J,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return d.createGeometry=function(e){var o,r,t,a=e._positions,l=e._colors,i=e._colorsPerVertex,n=e._arcType,s=e._granularity,p=e._ellipsoid,c=W.CesiumMath.chordLength(s,p.maximumRadius),d=S.defined(l)&&!i,y=a.length,f=0;if(n===R.ArcType.GEODESIC||n===R.ArcType.RHUMB){var u,h,C=n===R.ArcType.GEODESIC?(u=W.CesiumMath.chordLength(s,p.maximumRadius),h=Y.PolylinePipeline.numberOfPoints,Y.PolylinePipeline.generateArc):(u=s,h=Y.PolylinePipeline.numberOfPointsRhumbLine,Y.PolylinePipeline.generateRhumbArc),T=Y.PolylinePipeline.extractHeights(a,p),g=j;if(n===R.ArcType.GEODESIC?g.minDistance=c:g.granularity=s,g.ellipsoid=p,d){for(var m=0,v=0;v<y-1;v++)m+=h(a[v],a[v+1],u)+1;o=new Float64Array(3*m),t=new Uint8Array(4*m),g.positions=z,g.height=J;var P=0;for(v=0;v<y-1;++v){z[0]=a[v],z[1]=a[v+1],J[0]=T[v],J[1]=T[v+1];var _=C(g);if(S.defined(l))for(var b=_.length/3,B=l[v],A=0;A<b;++A)t[P++]=M.Color.floatToByte(B.red),t[P++]=M.Color.floatToByte(B.green),t[P++]=M.Color.floatToByte(B.blue),t[P++]=M.Color.floatToByte(B.alpha);o.set(_,f),f+=_.length}}else if(g.positions=a,g.height=T,o=new Float64Array(C(g)),S.defined(l)){for(t=new Uint8Array(o.length/3*4),v=0;v<y-1;++v)f=q(a[v],a[v+1],l[v],l[v+1],c,t,f);var E=l[y-1];t[f++]=M.Color.floatToByte(E.red),t[f++]=M.Color.floatToByte(E.green),t[f++]=M.Color.floatToByte(E.blue),t[f++]=M.Color.floatToByte(E.alpha)}}else{r=d?2*y-2:y,o=new Float64Array(3*r),t=S.defined(l)?new Uint8Array(4*r):void 0;var k=0,G=0;for(v=0;v<y;++v){var w=a[v];if(d&&0<v&&(I.Cartesian3.pack(w,o,k),k+=3,B=l[v-1],t[G++]=M.Color.floatToByte(B.red),t[G++]=M.Color.floatToByte(B.green),t[G++]=M.Color.floatToByte(B.blue),t[G++]=M.Color.floatToByte(B.alpha)),d&&v===y-1)break;I.Cartesian3.pack(w,o,k),k+=3,S.defined(l)&&(B=l[v],t[G++]=M.Color.floatToByte(B.red),t[G++]=M.Color.floatToByte(B.green),t[G++]=M.Color.floatToByte(B.blue),t[G++]=M.Color.floatToByte(B.alpha))}}var D=new F.GeometryAttributes;D.position=new N.GeometryAttribute({componentDatatype:U.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:o}),S.defined(l)&&(D.color=new N.GeometryAttribute({componentDatatype:U.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:t,normalize:!0}));var L=2*((r=o.length/3)-1),V=H.IndexDatatype.createTypedArray(r,L),x=0;for(v=0;v<r-1;++v)V[x++]=v,V[x++]=v+1;return new N.Geometry({attributes:D,indices:V,primitiveType:N.PrimitiveType.LINES,boundingSphere:O.BoundingSphere.fromPoints(a)})},function(e,o){return S.defined(o)&&(e=d.unpack(e,o)),e._ellipsoid=I.Ellipsoid.clone(e._ellipsoid),d.createGeometry(e)}});
